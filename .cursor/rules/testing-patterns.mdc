---
alwaysApply: true
---

# Testing Patterns

## RSpec Configuration

- Use [spec/spec_helper.rb](mdc:spec/spec_helper.rb) for global test setup
- Configure RSpec with `--require spec_helper` in [.rspec](mdc:.rspec)
- Load path includes `lib/` directory for proper module loading

## Test Structure

- One test file per main class: `spec/oxtenderabstract/class_name_spec.rb`
- Group related tests with `describe` and `context` blocks
- Use descriptive test names that explain expected behavior

## Mocking Patterns

```ruby
# Mock external dependencies
let(:mock_response) { instance_double(Net::HTTPResponse) }
allow(mock_response).to receive(:is_a?).with(Net::HTTPSuccess).and_return(true)
allow(mock_response).to receive(:body).and_return('content')
allow(mock_response).to receive(:[]).with('content-type').and_return('application/zip')

# Mock internal classes
let(:client_double) { instance_double(OxTenderAbstract::Client) }
allow(OxTenderAbstract::Client).to receive(:new).and_return(client_double)
```

## Configuration Reset

Always reset configuration in tests:

```ruby
after { OxTenderAbstract.reset_configuration! }
```

## Testing Result Objects

Test both success and failure cases:

```ruby
it 'returns success result' do
  result = subject.some_method
  expect(result).to be_success
  expect(result.data[:key]).to eq('value')
end

it 'returns failure result' do
  result = subject.failing_method
  expect(result).to be_failure
  expect(result.error).to include('expected error message')
end
```

## Testing Private Methods

Use `send` to test private methods when necessary:

```ruby
expect(parser.send(:extract_price_from_text, '1000.50')).to eq('1000.50')
```

## Mock Network Dependencies

Always mock network calls to avoid external dependencies:

```ruby
before do
  allow(Net::HTTP).to receive(:new).and_return(mock_http)
  allow(mock_http).to receive(:request).and_return(mock_response)
end
```

## Test Data

Use realistic but minimal test data that covers edge cases:

- Empty/nil values
- Malformed XML
- Network errors
- Large file sizes
- Invalid configurations

# Testing Patterns

## RSpec Configuration

- Use [spec/spec_helper.rb](mdc:spec/spec_helper.rb) for global test setup
- Configure RSpec with `--require spec_helper` in [.rspec](mdc:.rspec)
- Load path includes `lib/` directory for proper module loading

## Test Structure

- One test file per main class: `spec/oxtenderabstract/class_name_spec.rb`
- Group related tests with `describe` and `context` blocks
- Use descriptive test names that explain expected behavior

## Mocking Patterns

```ruby
# Mock external dependencies
let(:mock_response) { instance_double(Net::HTTPResponse) }
allow(mock_response).to receive(:is_a?).with(Net::HTTPSuccess).and_return(true)
allow(mock_response).to receive(:body).and_return('content')
allow(mock_response).to receive(:[]).with('content-type').and_return('application/zip')

# Mock internal classes
let(:client_double) { instance_double(OxTenderAbstract::Client) }
allow(OxTenderAbstract::Client).to receive(:new).and_return(client_double)
```

## Configuration Reset

Always reset configuration in tests:

```ruby
after { OxTenderAbstract.reset_configuration! }
```

## Testing Result Objects

Test both success and failure cases:

```ruby
it 'returns success result' do
  result = subject.some_method
  expect(result).to be_success
  expect(result.data[:key]).to eq('value')
end

it 'returns failure result' do
  result = subject.failing_method
  expect(result).to be_failure
  expect(result.error).to include('expected error message')
end
```

## Testing Private Methods

Use `send` to test private methods when necessary:

```ruby
expect(parser.send(:extract_price_from_text, '1000.50')).to eq('1000.50')
```

## Mock Network Dependencies

Always mock network calls to avoid external dependencies:

```ruby
before do
  allow(Net::HTTP).to receive(:new).and_return(mock_http)
  allow(mock_http).to receive(:request).and_return(mock_response)
end
```

## Test Data

Use realistic but minimal test data that covers edge cases:

- Empty/nil values
- Malformed XML
- Network errors
- Large file sizes
- Invalid configurations
